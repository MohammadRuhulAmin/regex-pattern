1. The . charecter can select all type of charecters also special charecters.
2. if i want to match 
bar ber bir bor bur

the regular expression is 
b[aeiou]r 

3. Negated charecter =  (^)
4. Some special characters are used to specify how many times a character will be repeated in the text. These special characters are the plus +, the asterisk *, and the question mark ?.
5.We put an asterisk * after a character to indicate that the character may either not match at all or can match many times. For example, indicate that the letter e should never occur in the text, or it can occur once or more side by side.
6.Parentheses ( ): Grouping
We can group an expression and use these groups to reference or enforce some rules. To group an expression, we enclose () in parentheses. For now just group haa below.
7.
The words ha and haa are grouped below. The first group is used by writing \1 to avoid rewriting. Here 1 denotes the order of grouping. Type \2 at the end of the expression to refer to the second group.
ha-ha,haa-haa
Regex: (ha)-\1,(haa)-\2
-\1 represents group 1 
-\2 represents group 2

8.Parentheses (?: ): Non-capturing Grouping
You can group an expression and ensure that it is not captured by references. For example, below are two groups. However, the first group reference we denote with \1 actually indicates the second group, as the first is a non-capturing group.
ha-ha,haa-haa
Regular Expression : (?:ha)-ha,(haa)-\1

9.Escape Character \
There are special characters that we use when writing regex. { } [ ] / \ + * . $^ | ? Before we can select these characters themselves, we need to use an escape character \. For example, to select the dot . and asterisk * characters in the text, let's add an escape character \ before it.
(*) Asterisk.
Regular Expression : (\*|\.)

10.Selecting by Line Start
We were using [0-9] to find numbers. To find only numbers at the beginning of a line, prefix this expression with the ^ sign.
1. 3 eggs, beaten
2. 1 tsp sunflower oil
3. 1 tsp butter

Regular Expression : 
^[0-9]


11. Positive Lookahead: (?=)
For example, we want to select the hour value in the text. Therefore, to select only the numerical values that have PM after them, we need to write the positive look-ahead expression (?=) after our expression. Include PM after the = sign inside the parentheses.
Date: 4 Aug 3PM
Regular Expression : \d+(?=PM)

12. Negative Lookahead: (?!)
For example, we want to select numbers other than the hour value in the text. Therefore, we need to write the negative look-ahead (?!) expression after our expression to select only the numerical values that do not have PM after them. Include PM after the ! sign inside the parentheses.
Date: 4 Aug 3PM
Regular Expression : \d+(?!=PM)

13. Flags : 
\g for global 
\i for case insensative 
\m for multiline

14. Greedy Matching
Regex does a greedy match by default. This means that the matchmaking will be as long as possible. Check out the example below. It refers to any match that ends in r and can be any character preceded by it. But it does not stop at the first letter r.

15. Lazy Matching
Lazy matchmaking, unlike greedy matching, stops at the first matching. For example, in the example below, add a ? after * to find the first match that ends with the letter r and is preceded by any character. It means that this match will stop at the first letter r.
